{"version":3,"sources":["data/mn/mn-districts.geojson","Districts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Districts","props","mapboxgl","accessToken","process","mapContainer","useRef","useState","long","setLong","lat","setLat","zoom","setZoom","hoveredDistrict","_setHoveredDistrict","hoveredDistrictRef","setHoveredDistrict","data","current","useEffect","map","Map","container","style","center","addControl","NavigationControl","once","addSource","mnDistricts","addLayer","on","e","features","length","setFeatureState","source","id","hover","_hoveredDistrict","getCenter","lng","toFixed","getZoom","className","height","ref","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,8C,8KC2I5BC,MAvIf,SAAmBC,GAGfC,IAASC,YAAcC,+FAEvB,IAAMC,EAAeC,iBAAO,MALN,EAOEC,oBAAU,WAPZ,mBAOfC,EAPe,KAOTC,EAPS,OAQAF,mBAAS,WART,mBAQfG,EARe,KAQVC,EARU,OASEJ,mBAAS,KATX,mBASfK,EATe,KASTC,EATS,OAWyBN,mBAAS,MAXlC,mBAWfO,EAXe,KAWEC,EAXF,KAYhBC,EAAqBV,iBAAOQ,GAE5BG,EAAqB,SAAAC,GACvBF,EAAmBG,QAAUD,EAC7BH,EAAoBG,IAyGxB,OAtGAE,qBAAU,WAEN,IAAIC,EAAM,IAAInB,IAASoB,IAAI,CACvBC,UAAWlB,EAAac,QACxBK,MAAO,mCACPC,OAAQ,CAACjB,EAAME,GACfE,KAAMA,IAKVS,EAAIK,WAAW,IAAIxB,IAASyB,mBAE5BN,EAAIO,KAAK,QAAQ,WAEbP,EAAIQ,UAAU,kBAAmB,CAC7B,KAAQ,UACR,KAAQC,MAGZT,EAAIU,SAAS,CACT,GAAM,iBACN,KAAQ,OACR,OAAU,kBACV,OAAU,GACV,MAAS,CACL,aAAc,CACV,QACA,CAAC,MAAO,WACR,KACA,UACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,UACA,KACA,UACY,WAEhB,eAAgB,CACZ,OACA,CAAC,UAAW,CAAC,gBAAiB,UAAU,GACxC,GACA,OAKZV,EAAIW,GAAG,YAAa,kBAAkB,SAAUC,GAC5C,GAAIA,EAAEC,SAASC,OAAS,EAAG,CACnBnB,EAAmBG,SAAWH,EAAmBG,SAAW,GAE5DE,EAAIe,gBACA,CAAEC,OAAQ,kBAAmBC,GAAItB,EAAmBG,SACpD,CAAEoB,OAAO,IAIjB,IAAIC,EAAmBP,EAAEC,SAAS,GAAGI,GAErCjB,EAAIe,gBACA,CAAEC,OAAQ,kBAAmBC,GAAIE,GACjC,CAAED,OAAO,IAGbtB,EAAmBuB,OAO3BnB,EAAIW,GAAG,aAAc,kBAAkB,WAC/BhB,EAAmBG,SACnBE,EAAIe,gBACA,CAAEC,OAAQ,kBAAmBC,GAAItB,EAAmBG,SACpD,CAAEoB,OAAO,IAGjBtB,EAAmB,SAGvBI,EAAIW,GAAG,QAAQ,WAAO,IAAD,EACIX,EAAIoB,YAAjBC,EADS,EACTA,IAAKhC,EADI,EACJA,IAEbD,EAAQiC,EAAIC,QAAQ,IACpBhC,EAAOD,EAAIiC,QAAQ,IACnB9B,EAAQQ,EAAIuB,UAAUD,QAAQ,YAKvC,IAGC,yBAAKE,UAAU,wBAEX,yBAAKA,UAAU,QAAf,6BAC8B,gCAAS/B,GAAoC,KAE3E,yBAAKwB,GAAG,oBAAoBO,UAAU,OAClC,yBAAKrB,MAAO,CAAEsB,OAAQ,QAAUC,IAAK1C,OCzGtC2C,MAxBf,WACE,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,cAChB,iEACA,gDAEF,yBAAKA,UAAU,QACb,kBAAC,EAAD,OAEF,gCACE,uBACIA,UAAU,WACVI,KAAK,wFACLC,OAAO,SACPC,IAAI,uBAJR,iDCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.60ce4bf1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mn-districts.73adc9f4.geojson\";","import React, { useState, useEffect, useRef } from \"react\";\nimport mnDistricts from \"./data/mn/mn-districts.geojson\";\nimport mapboxgl from 'mapbox-gl';\n\nfunction Districts(props) {\n\n    //Assign the Mapbox token from the environment variable set in .env\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\n\n    const mapContainer = useRef(null);\n\n    const [long, setLong] = useState(-94.503809);\n    const [lat, setLat] = useState(46.443226);\n    const [zoom, setZoom] = useState(4.5);\n\n    const [hoveredDistrict, _setHoveredDistrict] = useState(null);\n    const hoveredDistrictRef = useRef(hoveredDistrict);\n\n    const setHoveredDistrict = data => {\n        hoveredDistrictRef.current = data;\n        _setHoveredDistrict(data);\n    };\n\n    useEffect(() => {\n\n        let map = new mapboxgl.Map({\n            container: mapContainer.current,\n            style: \"mapbox://styles/mapbox/light-v10\",\n            center: [long, lat],\n            zoom: zoom\n        });\n\n\n        // Add zoom and rotation controls to the map.\n        map.addControl(new mapboxgl.NavigationControl());\n\n        map.once(\"load\", function () {\n\n            map.addSource('district-source', {\n                'type': 'geojson',\n                'data': mnDistricts\n            });\n\n            map.addLayer({\n                'id': 'district-layer',\n                'type': 'fill',\n                'source': 'district-source',\n                'layout': {},\n                'paint': {\n                    'fill-color': [\n                        'match',\n                        ['get', 'CD116FP'],\n                        '01',\n                        '#5AA5D7',\n                        '02',\n                        '#02735E',\n                        '03',\n                        '#00E0EF',\n                        '04',\n                        '#84D0D9',\n                        '05',\n                        '#202359',\n                        '06',\n                        '#CE7529',\n                        '07',\n                        '#00AE6C',\n                        '08',\n                        '#0056A3',\n                        /* other */ '#ffffff'\n                    ],\n                    'fill-opacity': [\n                        'case',\n                        ['boolean', ['feature-state', 'hover'], false],\n                        .8,\n                        0.5\n                    ]\n                }\n            });\n\n            map.on('mousemove', 'district-layer', function (e) {\n                if (e.features.length > 0) {\n                    if (hoveredDistrictRef.current && hoveredDistrictRef.current > -1) {\n\n                        map.setFeatureState(\n                            { source: 'district-source', id: hoveredDistrictRef.current },\n                            { hover: false }\n                        );\n                    }\n\n                    let _hoveredDistrict = e.features[0].id;\n\n                    map.setFeatureState(\n                        { source: 'district-source', id: _hoveredDistrict },\n                        { hover: true }\n                    );\n\n                    setHoveredDistrict(_hoveredDistrict);\n                }\n\n            });\n\n            // When the mouse leaves the state-fill layer, update the feature state of the\n            // previously hovered feature.\n            map.on('mouseleave', 'district-layer', function () {\n                if (hoveredDistrictRef.current) {\n                    map.setFeatureState(\n                        { source: 'district-source', id: hoveredDistrictRef.current },\n                        { hover: false }\n                    );\n                }\n                setHoveredDistrict(null);\n            });\n\n            map.on('move', () => {\n                const { lng, lat } = map.getCenter();\n\n                setLong(lng.toFixed(4));\n                setLat(lat.toFixed(4));\n                setZoom(map.getZoom().toFixed(2));\n            });\n\n        });\n\n    }, []);\n\n    return (\n        <div className=\"district-map-wrapper\">\n\n            <div className=\"info\">\n                Current hovered district: <strong>{hoveredDistrict ? hoveredDistrict : \"\"}</strong>\n            </div>\n            <div id=\"districtDetailMap\" className=\"map\">\n                <div style={{ height: \"100%\" }} ref={mapContainer}>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Districts;","import React from 'react';\nimport Districts from \"./Districts\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Minnesota Congressional Districts</h1>\n        <h3>Data as of 2019</h3>\n      </header>\n      <div className=\"body\">\n        <Districts />\n      </div>\n      <footer>\n        <a\n            className=\"App-link\"\n            href=\"https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Data provided by the United States Census. \n          </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}